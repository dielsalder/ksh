from re import search

def flatten(x):
    for i in x:
        if isinstance(x, collections.Iterable) and not isinstance(x, ignore_types):
            for i in flatten(x):
                yield i
        else:
            yield x


def atom(line):
    """Read one line of pdb into dict"""
    line = line.split()
    atom = dict(
            atom_num = int(line[1]),
            atom_name = line[2],
            res_name = line[3],
            res_num = int(line[5]),
            x = float(line[6]),
            y = float(line[7]),
            z = float(line[8])
    )
    return atom

class Pdb:
    """Handle pdb files"""
    def __init__(self, filename):
        self.filename = filename

    def get_all(self):
        """Read all atoms in pdb file"""
        with open(self.filename) as pdb:
            atoms = [atom(line)
                    for line in pdb if line.startswith('ATOM')]
        return atoms

    def get_nucleic(self):
        """Read only nucleic acid atoms in pdb file"""
        with open(self.filename) as pdb:
            atoms = [atom(line) for line in pdb if search
                    ('(^ATOM)\s*\S*\s*\S*\s*'
                     '(DA5|DA3|DA|DT5|DT3|DT|DG5|DG3|DG|DC5|DC3|DC)', line)]
        return atoms

class Molecule:
    def __init__(self, atoms):
        self.atoms = atoms
        self.fits = []

    def select(self, res = [], atom_name = []):
        """Select atoms by residue and element"""
        selection = (
            [atom for atom in self.atoms if atom['res_name'] in res
                and atom['atom_name'] in atom_name])
        return selection

    def crds_of(self, atoms):
        """Get xyz coordinates of selected atoms"""
        crds = [[atom['x'], atom['y'], atom['z']] for atom in flatten(atoms)]
        return crds

    def write(self, atoms, out = open('atoms.pdb', 'w')):
        """Write selected atoms to pdb"""
        out.write('REMARK      generated by pdb.py\n')
        for atom in atoms:
            vals = (['ATOM', atom['atom_num'], atom['atom_name'],
                atom['res_name'], atom['res_num'],
                atom['x'], atom['y'], atom['z'],
                '1.00', '0.00', '\n'])
            line = '    '.join(str(v) for v in vals)
            out.write(line)

    def minimize(self, selection):
        """fit minimized helix"""
        crds = crds_of(selection)
        fit = Fit(crds)
        self.fits.append(fit.minimize())
        return self.fits[-1]

class Dna(Molecule):
    pass

class Fit:
    """Store fit results"""
    def __init__(self, crds):
        self.crdset = ksh.crdset(crds)

    def no_rotate(self):
        """Fit without rotation"""
        fit = self.crdset.calc_all()
        self.no_rotate = fit
        return self.no_rotate

    def minimize(self):
        """Minimize rotation"""
        rotation = ksh.best_rotation(self.crdset)
        best = rotation.calc_all()
        self.best = best
        return self.best

    def write_minimize(self, Molecule):
        """Write minimized fit to selected Molecule"""
        Molecule.fits.append(self.best)

#b = Pdb('./pdb/ideal_bdna.pdb')
#
#b.p = b.select(res = ['G'], atom_name = ['P'])

#def write(self, atoms, out = open('atoms.pdb', 'w')):
#    """Write selected atoms to pdb"""
#    out.write('REMARK      generated by pdb.py\n')
#    for atom in atoms:
#        vals = (['ATOM', atom['atom_num'], atom['atom_name'],
#            atom['res_name'], atom['res_num'],
#            atom['x'], atom['y'], atom['z'],
#            '1.00', '0.00', '\n'])
#        line = '    '.join(str(v) for v in vals)
#        out.write(line)
#
#b.write(b.atoms)
